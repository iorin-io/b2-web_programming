@import: report
@require: azmath/azmath
@require: itemize
@require: code-printer/code-printer
@require: code-printer/code-syntax
@require: code-printer/code-theme
@require: image/image
@require: latexcmds/latexcmds
@require: fss/fss
@require: fss/fonts
@require: fss/style


ClassReport.document {|Webプログラミング期末レポート|} {|202210016 髙𣘺伊織|} '<
        +centering{
            \font-style[font-size 24pt]{
                \font-style[bold]{
                    金銭管理WebアプリケーションManay
                }
            }
        }
        +section{概要} <
            +p{Manayは、普段の金銭管理を簡単に行うことができるWebアプリである。}
            +p{
                このアプリケーションでは、ユーザが自分の収入と支出を追跡・管理することができる。
                簡単な操作を通して、入出金の登録・履歴の閲覧・残高の推移の確認が行える。
            }
            +p{
                このアプリケーションは、次のURLからアクセスできる。
                http://20.243.83.92:3000/
            }
            +p{
                このアプリケーションは以下のような構造になっている。
            }
            +centering{\include-image(`image/mvc.jpg`);}
        >
        +section{特徴と工夫した点}<
            +section{フレームワーク}<
                +p{
                    今回のアプリケーションでは、開発をより簡単・効率化するため、Ruby on Railsというフレームワークを使用した。
                    MVCモデルを利用することで、頭の中を整理しながらコーディングをすることができた。
                }
            >
            +section{モデル}<
                +p{
                    このアプリケーションでは、以下のようにモデルを定義した。
                    \listing{
                        * User
                        \listing{
                            * email:string
                            * encrypted_password:string
                            * current_balance:decimal
                        }
                        * Transaction
                        \listing{
                            * user_id:integer
                            * amount:decimal
                            * transaction_type:string
                            * created_at:datetime
                            * after_balance:decimal
                        }

                    }

                }
                +p{}
                +p{
                    ここで、balance（残高）属性がUser/Transactionのどちらにもあることに疑問を持つかもしれない。
                }
                +p{
                    これは、以下の機能を実装するためである。
                    \listing{
                        * 現在の残高を表示する
                        * これまでの残高の推移をグラフで表示する
                    }
                }
                +p{}
                +p{
                    current_balanceのみ存在する場合は、1ユーザにつき1つの残高しか持てないため、
                    残高の推移をグラフで表示することができない。
                    また、after_balanceのみ存在する場合は、
                    残高を表示するために全てのTransactionを走査し、計算する必要がある。
                }
                +p{
                    そのため、どちらのモデルにも現在の残高を保持する実装をすることにした。
                    以下は、\inline-code(`app/models/transaction.rb`);のコードの一部である。
                }
                +code-printer ?:(
                    CodePrinter.make-config CodeSyntax.ruby CodeTheme.tokyo-night
                )(`class Transaction < ApplicationRecord
  # 省略
  after_save :update_user_balance

  private

  def update_user_balance

    #省略

    new_balance = transaction_type == 'payment' ? user.current_balance - amount : user.current_balance + amount
    user.update(current_balance: new_balance)
    update_columns(after_balance: new_balance)
  end

end
                `);
                +p{
                    \inline-code(`after_save`);コールバックを使用し、transactionによって増減したbalanceを、\inline-code(`current_balance`);・\inline-code(`after_balance`);の両方に格納している。
                    これにより、上記要件が実装できた。
                }
            >
            +section{アカウント作成/ログイン}<
                +p{
                    このアプリケーションは、ユーザごとにサービスを提供する必要があった。
                    今回は、deviseというgemを使用した。
                    deviseを用いることで、ユーザ登録・認証系の機能を簡単に実装することができた。
                }
                +p{
                    特に、\inline-code(`app/conrollers/application_controller.rb`);に以下のコードを追加することで、
                    アプリケーションにおける全てのアクションに対して、ログイン状態を要求することができた。
                }
                +file-printer ?:(
                    CodePrinter.make-config CodeSyntax.ruby CodeTheme.tokyo-night
                )(`app/controllers/application_controller.rb`);
                +p{
                    また、アカウント作成時に現在所持している金額を入力する機能を実装した。
                    これは、以下の2点を狙ったものである。
                    \listing{
                        * アカウント作成時に\inline-code(`after_balance`);にデータを入れることで、トップページの折れ線グラフでレンダリングエラーを発生させない
                        * 現在の所持金を、入出金取引と同様に登録するのは直観的ではない
                    }
                }
                +p{}
                +p{
                    \inline-code(`current_balance`);の初期登録は\inline-code(`app/views/devise/registrations/new.html.erb`);によって実装されている。
                }
                +code-printer ?:(
                    CodePrinter.make-config CodeSyntax.ruby CodeTheme.tokyo-night
                )(`# 省略
<div class="field">
  <%= f.label :current_balance, "残高登録" %>
  <%= f.number_field :current_balance, min: 0 %>
</div>
# 省略`);
                +p{
                    また、\inline-code(`after_balance`);の初期登録は\inline-code(`app/controllers/transactions_controller.rb`);によって実装されている。
                }
                +code-printer ?:(
                    CodePrinter.make-config CodeSyntax.ruby CodeTheme.tokyo-night
                )(`# 省略
	def create
	  super do |user|
		if user.persisted?
		  initial_balance = params[:user][:current_balance].to_f
		  user.transactions.create(amount: initial_balance, description: "初期登録", transaction_date: Time.current, after_balance: initial_balance)
		end
	  end
	end
# 省略`);
                +p{
                    この時、\inline-code(`after_balance`);の登録より前に\inline-code(`current_balance`);の登録が行われるため、例外処理を行う必要があった。
                    以下は\inline-code(`app/models/tranaction.rb`);での例外処理の内容である。
                }
                +code-printer ?:(
                    CodePrinter.make-config CodeSyntax.ruby CodeTheme.tokyo-night
                )(`# 省略
  def update_user_balance

    return if description == '初期登録'

    new_balance = transaction_type == 'payment' ? user.current_balance - amount : user.current_balance + amount
# 省略`);

            >
            +section{入出金処理}<
                +p{
                    このアプリケーションでは、入出金処理を行うために、Transactionモデルを用いた。
                    以下は、\inline-code(`app/controllers/transactions_controller.rb`);のコードの一部である。
                }
                +code-printer ?:(
                    CodePrinter.make-config CodeSyntax.ruby CodeTheme.tokyo-night
                )(`# 省略
  def new
    @transaction = Transaction.new
  end

  def create
    @transaction = current_user.transactions.new(transaction_params)
    if @transaction.save
      redirect_to root_path
    else
      # 失敗時の処理
      Rails.logger.debug @transaction.errors.full_messages
      render :new
    end
  end

  private

  def transaction_params
    params.require(:transaction).permit(:amount, :description, "transaction_date(1i)", "transaction_date(2i)", "transaction_date(3i)", "transaction_date(4i)", "transaction_date(5i)", :transaction_type)
  end
# 省略`);
                +p{
                    この時、入金と支払いを正負の数で入力するシステムは、ユーザーフレンドリーではないと考えた。
                    そのため、入金と支払いを区別するために、\inline-code(`transaction_type`);属性を用いた。
                    この属性では、\inline-code(`payment`);と\inline-code(`deposit`);の2つの値を取る。
                    erbファイルでは、チェックボックスで選択してもらい、\inline-code(`after_balance`);の計算は以下のように場合わけを行なった。
                }
                +code-printer ?:(
                    CodePrinter.make-config CodeSyntax.ruby CodeTheme.tokyo-night
                )(`# 省略
new_balance = transaction_type == 'payment' ? user.current_balance - amount : user.current_balance + amount
# 省略`);
                +p{
                    \inline-code(`app/views/transactions/new.html.erb`);で実装した画面が以下である。
                }
                +centering{\include-image(`image/transaction.jpg`);}
            >
            +section{残高推移グラフ}<
                +p{
                    このアプリケーションでは、残高の推移をグラフで表示する機能を実装した。
                    以下は、\inline-code(`app/controllers/home_controller.rb`);のコードの一部である。
                }
                +code-printer ?:(
                    CodePrinter.make-config CodeSyntax.ruby CodeTheme.tokyo-night
                )(`# 省略
  <div id="balance_chart" style="width: 70dvw; height: 50dvh;"></div>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript">
    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
      var data = google.visualization.arrayToDataTable([
        ['日付', '残高'],
        <% current_user.transactions.each do |transaction| %>
          ['<%= transaction.created_at.strftime("%Y-%m-%d") %>', <%= transaction.after_balance %>],
        <% end %>
      ]);

      var options = {
        title: '残高の推移',
        pointSize:8,
        legend: { position: 'bottom' }
      };

      var chart = new google.visualization.LineChart(document.getElementById('balance_chart'));

      chart.draw(data, options)
    }
  </script>
# 省略`);
                +p{
                    これによって、グラフを表示することができた。実際の例は以下の通りである。
                }
                +centering{\include-image(`image/graph.jpg`);}
            >
            +section{使用ライブラリ}<
                +p{
                    \listing{
                        * devise (4.9.3)
                        * unicorn (6.1.0)
                        * Google Charts
                    }
                }
            >
        >
    +section{感想}<
        +p{
            本授業は、非常に有意義な授業だったと感じている。
            Web開発は多少ながら経験があったものの、バックエンドについてはほとんど触ったことがなかった。
            本授業を通して、バックエンドやデータベースとの連携について実践的に学ぶことができた。
            私は今までRubyを扱ったことがなく、この授業がなければおそらくこの先も触ることがなかったため、貴重な機会だった。
            特にRubyの「全てはオブジェクトである」という考え方が面白いと感じた。
        }
    >
    +section{参考文献}<
        +p{
            \listing{
                * Rails ガイド Active Record コールバック
                  (https://railsguides.jp/active_record_callbacks.html)
                * rails devise完全入門！結局deviseって何ができるの？
                  (https://www.sejuku.net/blog/13378)
                * deviseのユーザー登録機能を拡張する (https://qiita.com/krile136/items/e04181bb9e9dc0f37a79)
                * Rails deviseの導入とView + Controllerのカスタマイズ(sign_in/out後のpath指定など) (https://qiita.com/mmmasuke/items/7d5c47b4a40f6912adf2)
                * deviseを使ってユーザー管理機能を実装 (https://qiita.com/mr0216/items/54bc1c5f9e673c8eaa84)
                * 【Google Charts】マーカー付き折れ線グラフ(https://gldegg.com/google-charts_line_pointsize/)
                * [Rails]CSSファイルの適用について(https://qiita.com/john-tarou/items/2eb178db48b3764cb847)
                * Railsアプリのデプロイ方法について（手動編）(https://qiita.com/Tatsu88/items/7030fd72d0ba714917fe)
            }
        }
    >
>
